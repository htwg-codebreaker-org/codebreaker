// src/main/scala/de/htwg/codebreaker/model/WorldMap.scala
package de.htwg.codebreaker.model

import MapObject._

/**
 * Repräsentation der Weltkarte als Raster von Tiles.
 *
 * @param width   Breite in Tiles
 * @param height  Höhe in Tiles
 * @param tiles   Flache Liste aller Tiles mit Position und Kontinent
 */
case class WorldMap(width: Int, height: Int, tiles: Vector[Tile]):

  /**
   * Erzeugt eine 2D‑Matrix von MapObject, die für jede Position
   * angibt, ob dort Spieler, Server, beides oder nichts steht.
   *
   * Wirft IllegalArgumentException, falls auf ungültige Koordinaten
   * zugegriffen wird (tileAt(x,y).get).
   */
  def getMapData(players: List[Player], servers: List[Server]): Vector[Vector[MapObject]] =
    Vector.tabulate(height, width) { (y, x) =>
      tileAt(x, y) match
        case Some(tile) =>
          val maybePlayer = players.zipWithIndex.find((p, _) => p.tile == tile)
          val maybeServer = servers.zipWithIndex.find((s, _) => s.tile == tile)

          (maybePlayer, maybeServer) match
            case (Some((_, pIdx)), Some((server, sIdx))) =>
              // Beides auf derselben Kachel
              PlayerAndServerTile(pIdx, sIdx, server.serverType, tile.continent)
            case (Some((_, pIdx)), None) =>
              // Nur Spieler
              PlayerOnTile(pIdx)
            case (None, Some((server, sIdx))) =>
              // Nur Server
              ServerOnTile(sIdx, server.serverType, tile.continent)
            case (None, None) =>
              // Nichts
              EmptyTile(tile.continent)
        case None =>
          // Ungültige Koordinate
          throw new IllegalArgumentException(s"Invalid tile coordinates at ($x, $y)")
    }

  /** Liefert Some(Tile) für gültige Koordinaten, sonst None. */
  def tileAt(x: Int, y: Int): Option[Tile] =
    tiles.find(t => t.x == x && t.y == y)

  /** Alle Tiles eines bestimmten Kontinents. */
  def tilesOf(continent: Continent): Vector[Tile] =
    tiles.filter(_.continent == continent)

  /** Kontinent‑Lookup per Koordinate. */
  def continentAt(x: Int, y: Int): Option[Continent] =
    tileAt(x, y).map(_.continent)

object WorldMap:

  /** Erzeugt die Standard‑Map mit Breite=80, Höhe=40 und Kontinent‑Einteilung. */
  def defaultMap: WorldMap =
    val width  = 80
    val height = 40
    val tiles = for {
      y <- 0 until height
      x <- 0 until width
    } yield Tile(x, y, classifyContinent(x, y))
    WorldMap(width, height, tiles.toVector)

  // --- Koordinaten für Südamerika als Set ---
  private val southAmericaTiles: Set[(Int, Int)] = Set(
    (25,31),(24,31),(23,31),(23,30),(24,30),(25,30),(25,29),(24,29),(24,28),(25,28),(26,28),(27,28),
    (28,27),(27,27),(26,27),(25,27),(24,27),(24,26),(25,26),(26,26),(27,26),(28,26),(30,25),(29,25),
    (28,25),(27,25),(26,25),(25,25),(24,25),(24,24),(23,24),(25,24),(26,24),(27,24),(28,24),(29,24),
    (30,24),(31,23),(30,23),(29,23),(28,23),(27,23),(26,23),(25,23),(24,23),(23,23),(22,23),(22,22),
    (23,22),(24,22),(25,22),(26,22),(27,22),(28,22),(29,22),(30,22),(31,22),
    (23,21),(24,21),(25,21),(26,21),(27,21),(28,21),
    (27,20),(26,20),(25,20),(24,20),(23,20),(24,19)
  )

  // --- Koordinaten für Europa als Set (inkl. Ergänzungen) ---
  private val europeTiles: Set[(Int, Int)] = Set(
    (36,14),(37,14),(38,14),(40,14),(41,14),(42,14),(42,15),(43,15),(43,14),(44,14),(44,13),(45,13),
    (44,12),(44,11),(44,10),(44,9),(44,8),(44,7),(43,7),(42,7),(41,7),(41,8),(41,9),(40,9),(39,9),
    (39,10),(40,10),(41,10),(41,11),(40,11),(39,12),(38,12),(38,13),(36,11),(36,12),(38,12),(38,11),
    (37,11),(37,10),
    (39,11),(39,13),(40,13),(41,13),(42,13),(43,13),(43,12),(42,12),(41,12),(40,12),
    (42,11),(43,11),(43,10),(42,10),(42,9),(43,9),(43,8),(42,8),(37,12),(50,7),(51,5),(50,5),(49,5),(49,6),(48,6),(49,7),(48,7),(50,7),(51,8),
    (50,9),(50,10),(50,11),(50,12),(49,12),(48,12),(47,12),(48,13),(47,13),(47,14),(46,13),(45,7),(46,7),(46,8),
    (47,8),(47,7),(48,8),(48,7),(49,7),
    (46,12),(45,12),(45,11),(46,11),(47,11),(48,11),(49,11),(49,10),(48,10),(47,10),(46,10),(45,10),(45,9),(46,9),(47,9),(48,9),(49,9),(49,8),(50,8),(45,8),
    (50,9),(50,10),(50,11),(50,12),(49,12),(48,12),(48,13),(47,13),(47,14),(46,13),(45,7),(46,7),(46,8),
    (47,8),(47,7),(48,8),(48,7),(49,7)
  )


  // --- Koordinaten für Nordamerika als Set (alle aus deiner Liste, auch die bisher Ocean waren) ---
  private val northAmericaTiles: Set[(Int, Int)] = Set(
    (21,20),(21,19),(20,19),(19,19),(23,18),(22,18),(21,18),(20,18),(19,18),(18,18),(17,18),
    (15,17),(16,17),(17,17),(18,17),(22,17),(22,16),(21,16),(20,16),(19,16),(18,16),(17,16),(16,16),(15,16),(14,16),
    (13,15),(14,15),(15,15),(16,15),(17,15),(18,15),(19,15),(20,15),(21,15),(22,15),(23,15),
    (24,14),(23,14),(22,14),(21,14),(20,14),(19,14),(18,14),(17,14),(16,14),(15,14),(13,14),(14,14),
    (13,13),(14,13),(15,13),(16,13),(17,13),(18,13),
    (19,13),(20,13),(21,13),(22,13),(23,13),(24,13),(25,13),(26,13),
    (27,12),(26,12),(25,12),(24,12),(23,12),(22,12),(21,12),(20,12),(19,12),
    (18,12),(17,12),(16,12),(15,12),(14,12),(13,12),(12,12),
    (12,11),(13,11),(14,11),(15,11),(16,11),(17,11),(18,11),
    (19,11),(20,11),(21,11),(22,11),(23,11),(24,11),(25,11),(26,11),(27,11),
    (26,10),(25,10),(24,10),(23,10),(20,10),(19,10),
    (18,10),(17,10),(16,10),(15,10),(14,10),(13,10),(12,10),(11,10),(10,10),(7,10),(6,10),(5,10),
    (4,9),(5,9),(6,9),(7,9),(8,9),(9,9),(10,9),(11,9),(12,9),(13,9),(14,9),(15,9),(16,9),(17,9),(18,9),
    (19,9),(20,9),(23,9),(24,9),(25,9),(26,9),
    (26,8),(25,8),(24,8),(23,8),(22,8),(21,8),(20,8),(19,8),
    (18,8),(17,8),(16,8),(15,8),(14,8),(13,8),(12,8),(11,8),(10,8),(9,8),(8,8),(7,8),(6,8),(5,8),(4,8),
    (4,7),(5,7),(6,7),(7,7),(8,7),(9,7),(10,7),(11,7),(12,7),(13,7),(14,7),(15,7),(16,7),(17,7),(18,7),
    (19,7),(20,7),(21,7),(22,7),(23,7),(24,7),(25,7),
    (24,6),(23,6),(22,6),(21,6),(20,6),(19,6),
    (18,6),(17,6),(16,6),(15,6),(14,6),(13,6),
    (14,5),(15,5),(16,5),(17,5),(18,5),(19,5),(20,5),(21,5),(22,5),(23,5),
    (23,4),(22,4),(21,4),(20,4),(19,4),
    (18,4),(17,4),(16,4),(15,4),
    (19,3),(20,3),(21,3),(22,3),(23,3),(24,3),(25,3),
    (22,2),(23,2),(24,2),(25,2),(26,2),
    (34,2),(33,2),(32,2),(31,2),(30,2),(29,2),
    (27,3),(26,3),(28,3),(29,3),(30,3),(31,3),(32,3),(33,3),(34,3),(35,3),
    (34,4),(33,4),(32,4),(31,4),(30,4),(29,4),(28,4),(27,4),(26,4),(25,4),
    (25,5),(26,5),(27,5),(28,5),(29,5),(30,5),(31,5),(32,5),(33,5),(34,5), 
    (28,6),(29,6),(30,6),(31,6),(32,6),(33,6),(34,6),
    (34,7),(33,7),(32,7),(31,7),(30,7),(29,7),(28,7),
    (28,8),(29,8),(30,8),(31,8),
    (30,9),(29,9),(28,9)
  )


  // --- Koordinaten für Afrika als Set (deine Liste) ---
  private val africaTiles: Set[(Int, Int)] = Set(
    (37,16),(38,15),(39,15),(40,15),(36,16),(38,16),(40,16),(39,16),(41,16),(42,16),(43,16),(44,16),(45,16),
    (45,17),(44,17),(43,17),(42,17),(41,17),(40,17),(39,17),(38,17),(37,17),(36,17),(35,17),(35,18),(36,18),
    (37,18),(38,18),(39,18),(40,18),(41,18),(42,18),(43,18),(44,18),(45,18),(46,19),(45,19),(44,19),(43,19),
    (42,19),(41,19),(39,19),(40,19),(38,19),(37,19),(36,19),(35,19),(36,20),(37,20),(38,20),(39,20),(40,20),
    (41,20),(42,20),(43,20),(44,20),(45,20),(46,20),(47,20),(48,20),(47,21),(46,21),(45,21),(44,21),(43,21),
    (42,21),(41,21),(40,21),(40,22),(41,22),(42,22),(43,22),(44,22),(45,22),(46,22),(46,23),(45,23),(44,23),
    (43,23),(42,23),(41,23),(41,24),(42,24),(43,24),(44,24),(45,24),(46,24),(40,24),(41,25),(42,25),(43,25),
    (44,25),(45,25),(45,26),(44,26),(43,26),(42,26),(41,26),(41,27),(42,27),(43,27),(44,27),(47,25),(47,24),
    (37,15),(48,24)
  )

  // --- Koordinaten für Australien/Ozeanien als Set (nur die von dir genannten) ---
  private val oceaniaTiles: Set[(Int, Int)] = Set(
    (61,27),(62,27),(63,27),(64,27),(65,27),(66,27),(67,27),(68,27),
    (67,28),(67,29),(71,29),(72,29),(72,28),(68,27),(68,26),(67,26),(66,26),(65,26),(64,26),(62,26),
    (63,26),(61,26),(61,25),(62,25),(63,25),(64,25),(65,25),(66,25),(67,25),(66,24),(65,24),(64,24),
    (63,24),(62,24),(66,23),(66,22),(67,22),(67,23),(69,23),(65,22),(64,22)
  )

  // --- Koordinaten für Asien als Set (User-Wunsch) ---
  private val asiaTiles: Set[(Int, Int)] = Set(
    (44,15),(45,15),(46,15),(46,16),(46,17),(46,18),(47,19),(48,19),(49,18),(50,18),(50,17),(51,17),(52,17),
    (52,18),(53,19),(53,20),(54,20),(54,19),(54,18),(55,18),(56,18),(57,18),(57,19),(57,20),(57,21),(58,21),
    (58,22),(59,22),(59,23),(60,23),(61,23),(62,23),(62,22),(62,21),(61,21),(60,21),(60,22),(61,22),(61,20),
    (62,20),(62,19),(62,18),(62,17),(62,16),(62,15),(62,14),(63,14),(63,15),(64,16),(65,15),(66,15),(66,14),
    (66,13),(66,12),(63,14),(64,14),(65,13),(65,12),(65,11),(65,10),(66,10),(67,10),(68,10),(69,10),(69,9),
    (70,9),(71,9),(70,10),(69,10),(69,11),(69,12),(72,10),(73,10),(73,9),(74,9),(75,9),(75,8),(74,7),(73,7),
    (72,7),(71,7),(70,7),(69,7),(68,7),(67,6),(67,5),(66,5),(65,5),(66,6),(65,6),(65,7),(64,6),(63,6),(62,6),
    (61,6),(60,6),(60,5),(59,5),(58,4),(57,4),(56,3),(56,4),(57,5),(56,5),(55,5),(54,6),(53,6),(52,6),(51,6),
    (51,7),
    // Ergänzung: weitere Asia-Koordinaten (User-Request)
    (58,5),(55,6),(56,6),(57,6),(58,6),(59,6),(52,7),(53,7),(54,7),(55,7),(56,7),(57,7),(58,7),(59,7),(60,7),(61,7),(62,7),(63,7),(64,7),(66,7),(67,7),
    (52,8),(53,8),(54,8),(55,8),(56,8),(57,8),(58,8),(59,8),(60,8),(61,8),(62,8),(63,8),(64,8),(65,8),(66,8),(67,8),(68,8),(69,8),(70,8),(71,8),(72,8),(73,8),(74,8),
    (72,9),(68,9),(67,9),(66,9),(65,9),(64,9),(63,9),(62,9),(61,9),(60,9),(59,9),(58,9),(57,9),(56,9),(55,9),(54,9),(53,9),(52,9),(51,9),
    (51,10),(52,10),(53,10),(54,10),(55,10),(56,10),(57,10),(58,10),(59,10),(60,10),(61,10),(62,10),(63,10),(64,10),
    (64,11),(63,11),(62,11),(61,11),(60,11),(59,11),(58,11),(57,11),(56,11),(55,11),(54,11),(53,11),(52,11),(51,11),
    (51,12),(52,12),(53,12),(54,12),(55,12),(56,12),(57,12),(58,12),(59,12),(60,12),(61,12),(62,12),(63,12),(64,12),
    (64,13),(63,13),(62,13),(61,13),(60,13),(59,13),(58,13),(57,13),(56,13),(55,13),(54,13),(53,13),(52,13),(51,13),(50,13),(49,13),
    (48,14),(49,14),(50,14),(51,14),(52,14),(53,14),(54,14),(55,14),(56,14),(57,14),(58,14),(59,14),(60,14),(61,14),
    (61,15),(60,15),(59,15),(58,15),(57,15),(56,15),(55,15),(54,15),(53,15),(52,15),(51,15),(50,15),(49,15),(48,15),(47,15),
    (47,16),(48,16),(49,16),(50,16),(51,16),(52,16),(53,16),(54,16),(55,16),(56,16),(57,16),(58,16),(59,16),(60,16),(61,16),
    (61,17),(60,17),(59,17),(58,17),(57,17),(56,17),(55,17),(54,17),(53,17),(49,17),(48,17),(47,17),
    (47,18),(48,18),(53,18),(58,18),(59,18),(60,18),(61,18),
    (61,19),(60,19),(59,19),(58,20),(59,20),(60,20),(59,21)
  )

  /**
   * Ordnet jeder (x,y)‑Koordinate einen Kontinent zu.
   * Bereiche sind für 80x40 Tiles und orientieren sich an deinen Markierungen.
   * Ergänze weitere Bereiche nach Bedarf!
   */
  private def classifyContinent(x: Int, y: Int): Continent =
    if (southAmericaTiles.contains((x, y))) Continent.SouthAmerica
    else if (northAmericaTiles.contains((x, y))) Continent.NorthAmerica
    else if (africaTiles.contains((x, y))) Continent.Africa
    else if (europeTiles.contains((x, y))) Continent.Europe
    else if (oceaniaTiles.contains((x, y))) Continent.Oceania
    else if (asiaTiles.contains((x, y))) Continent.Asia

    // --- Rest wie bisher (grobe Bereiche, ggf. weiter anpassen) ---
    else (x, y) match
      case _ => Continent.Ocean

  /** Druckt die Kurz‑Codes (z.B. "NA", "EU", "~~") für alle Kacheln. */
  def printContinentMap(map: WorldMap): Unit =
    for y <- 0 until map.height do
      val row = for x <- 0 until map.width yield
        map.continentAt(x, y).map(_.short).getOrElse("--")
      println(row.mkString(" "))
